//%GenSrc:1:aq+tpxip6UO/6UcWRhmz/Q
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

using System.Collections;
using com.kupio.instinctai;

namespace instinctai.usr.behaviours
{
    using UnityEngine;
    
    

    public partial class WalkerTree : MonoBehaviour
    {
        private Transform target = null;
        private Walker myWalker;
        private mapManager manager;

        void Start()
        {
            myWalker = GetComponent<Walker>();
            manager = GameObject.Find("Map Manager").GetComponent<mapManager>();
        }

        public NodeVal goToWork()
        {
            myWalker.goToWork();
            manager.atWork.Add(myWalker);
            return NodeVal.Success;
        }

        public NodeVal listenForThings()
        {
            myWalker.findCallers();
            if (myWalker.targetPos != null)
            {
                return NodeVal.Success;
            }
            return NodeVal.Fail;
        }

        public NodeVal goHome()
        {
            myWalker.goHome();
            return NodeVal.Success;
        }

        public NodeVal leave()
        {
            myWalker.goToWork();
            manager.houseless.Add(myWalker);
            return NodeVal.Success;
        }

        public NodeVal deactive()
        {
            myWalker.deactive();
            return NodeVal.Success;
        }

        public NodeVal enterStore()
        {
            myWalker.bestUtil.patrons.Add(myWalker);
            myWalker.bestUtil.budget += myWalker.bestUtil.price;
            myWalker.budget -= myWalker.bestUtil.price;
            myWalker.bestUtil.StartCoroutine(myWalker.bestUtil.patronage(5, myWalker));
            return NodeVal.Success;
        }

        public NodeVal checkPrice()
        {
            if (myWalker.checkPrice())
            {
                myWalker.atHome = true;
                myWalker.haveHome = true;
                myWalker.deactive();
                return NodeVal.Success;
            }
            myWalker.atHome = true;
            myWalker.haveHome = false;
            return NodeVal.Fail;
            
        }

        public NodeVal moveToWaypoint()
        {
            if (myWalker.reachedEndOfPath)
            {
                Debug.Log(myWalker.reachedEndOfPath);
                return NodeVal.Success;
            }
                myWalker.MoveToWaypoint();
                Debug.Log(myWalker.reachedEndOfPath);
                return NodeVal.Running;
        }

        public NodeVal enterWork()
        {
            manager.StartCoroutine(manager.working(10, myWalker));
            return NodeVal.Success;
        }

        public NodeVal changeThings()
        {
            if (!myWalker.reachedEndOfPath)
            {
                return NodeVal.Fail;
            } 
           // myWalker.moveIn();
            myWalker.deactive();
            target = null;
            return NodeVal.Success;
        }
        
    }
}
