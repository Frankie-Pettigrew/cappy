//%GenSrc:1:gGvtNrZ8k0i8s0QB1lkIWQ
//%CodeKey:PnEerUvDTUeXxFBnJC+WNQ
/*
 * This code was generated by InstinctAI at 2017-09-24 16:00
 *
 *         DO NOT MODIFY BY HAND
 *     THIS FILE WILL BE REGENERATED
 *
 *      DO NOT REMOVE/EDIT COMMENTS
 *
 * If you do need to modify this file, note that it is a partial class.
 * See https://msdn.microsoft.com/en-us/library/wa80x488.aspx
 * You can edit the file Miow.cs
 */

namespace instinctai.usr.behaviours
{
    using System.Collections;
    using UnityEngine;
    using com.kupio.instinctai;
#if UNITY_EDITOR
    using UnityEditor;
    using com.kupio.instinctai.live;
#endif

    [RequireComponent(typeof(UnityEngine.Animator))]
    public partial class Miow : MonoBehaviour
#if UNITY_EDITOR
        , LiveTree
#endif
    {
        private IEnumerator _state = null;
        private int _jmp;
        private bool valid = true;

        [HideInInspector]
        private Animator comp_Animator;
#if UNITY_EDITOR
    private LiveUpdate _live;
    private int _liveHandle;
#endif

        void Update()
        {
            if (valid) {
                if (_state == null || _state.MoveNext() == false) {
                    _state = StateGen();
                    _state.MoveNext();
                }
            }
        }
        private IEnumerator StateGen()
        {
            int node = 0;
            NodeVal ret = NodeVal.Error;
            _jmp = -1;
            comp_Animator = GetComponent<Animator>();
            float f1 = 0.0f;
            float f2 = 0.0f;
            int n0c = -1;
            NodeVal n0r = NodeVal.Invalid;
            valid = valid && (comp_Animator != null);
            if (!valid) {
                throw new BehaviourTreeException("Behaviour tree will not run. The GameObject has missing required components.");
            }
            do {
                switch (node) {
                    case 0:
                        /* Sequence */

                        #if UNITY_EDITOR
                            if (_live != null) _live = _live.SetLiveValue(0, _liveHandle, NodeVal.Running, false, true);
                        #endif
                        n0c = 1;
                        node = 1;
                        n0r = NodeVal.Success;
                        break;
                    case 3:
                        /* Sequence */
                        if (_jmp >= 0) {
                            node = _jmp;
                            _jmp = -1;
                            continue;
                        }
                        n0r = (NodeVal)System.Math.Max((int)n0r, (int)ret);
                        if ((ret == NodeVal.Running || ret == NodeVal.Success) && n0c < 2) {
                            node = ++n0c;
                        } else {
                            n0c = 1;
                            node = 0;
                            ret = n0r;

                        #if UNITY_EDITOR
                            if (_live != null) _live = _live.SetLiveValue(0, _liveHandle, ret, true, false);
                        #endif
                        }
                        yield return null;
                        break;
                    case 1:
                        /* Wait */

                        f1 = Time.time;
                        f2 = UnityEngine.Random.Range(5f, 10f);

                        do
                        {
                                ret = ((Time.time - f1) > f2)? NodeVal.Success : NodeVal.Running;
                            if (ret == NodeVal.Running) {

                        #if UNITY_EDITOR
                            if (_live != null) _live = _live.SetLiveValue(1, _liveHandle, NodeVal.Running, true, false);
                        #endif
                                yield return null;
                            } else {
                                node = 3;
                                break;
                            }
                        } while (true);

                        #if UNITY_EDITOR
                            if (_live != null) _live = _live.SetLiveValue(1, _liveHandle, ret, false, false);
                        #endif

                        break;
                    case 2:
                        /* Say miow */


                        comp_Animator.SetTrigger("Miow");
                        ret = NodeVal.Success;
                        node = 3;

                        #if UNITY_EDITOR
                            if (_live != null) _live = _live.SetLiveValue(3, _liveHandle, ret, false, false);
                        #endif

                        break;
                }
            } while (node >= 0);
            yield return null;
        }
        public void ResetTree()
        {
            if (_jmp != 0)
            {
                _jmp = 0;
            }
        }
#if UNITY_EDITOR
        public bool SetLive(LiveUpdate live, string treeKey, string codeKey, int liveHandle, out bool codeMatch) {
            if (treeKey == "gGvtNrZ8k0i8s0QB1lkIWQ") {
                _live = live;
                codeMatch = (codeKey == "PnEerUvDTUeXxFBnJC+WNQ");
                if (codeMatch) {
                    _liveHandle = liveHandle;
                }
                return true;
            }
            codeMatch = false;
            return false;
        }
#endif

    }
}
