//%GenSrc:1:kuezqx2vL0eHifQPMmE8JA
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

namespace instinctai.usr.behaviours
{
    using com.kupio.instinctai;
    using UnityEngine;
    using UnityEngine.UI;

    public partial class Mouse : MonoBehaviour
    {
        public Arena Arena;
        public Text FoodText;
        public Text BehaviourText;
        public Text CatText;
        public Text DesperationText;
        public float CheeseValue = 10;

        /* Idle target could be private, but it's nice to see it in the inspector for demo purposes. */
        public Vector3 IdleTarget;

        /// <summary>
        /// Food level ranges from 0 (Empty tummy) to 100 (Full tummy).
        /// </summary>
        public float FoodLevel;

        public float MovementSpeed = 0.5f;

        public float FoodBurnPerSecond = 1.3f;

        /* Personality traits, ranging 0..1 */

        public float Belligerent = 0;
        public float Gluttonous = 0;

        public float DistanceFromCat()
        {
            return (this.transform.position - Arena.Cat.transform.position).magnitude;
        }

        public float Desperation
        {
            get
            {
                var d = 1 - (DistanceFromCat() / 8);
                return 1 - (FoodLevel / 100) + d;
            }
        }


        private void Update()
        {
            FoodLevel -= (FoodBurnPerSecond * Time.deltaTime);
            FoodLevel = Mathf.Max(0f, FoodLevel);

            this.UpdateAI();

            UpdateReadouts();
        }

        private void UpdateReadouts()
        {
            CatText.text = "Cat Distance: "+ string.Format("{0:F1}", DistanceFromCat())+"m";
            FoodText.text = "Food Level: " + ((int)FoodLevel) + "%";
            DesperationText.text = "Desperation: " + Desperation;
        }

        public NodeVal SignalBehaviourOnScreen(string behaviour)
        {
            BehaviourText.text = behaviour;
            return NodeVal.Success;
        }

        public bool CheeseIsAvailable()
        {
            return Arena.CheeseCount > 0;
        }

        public Vector3 ClosestCheese()
        {
            return Arena.ClosestCheesePosition(transform.position);
        }

        public Vector3 CatPosition()
        {
            return Arena.Cat.transform.position;
        }

        public bool CatWithinDistance(float d)
        {
            return DistanceFromCat() < d;
        }

        public NodeVal AttackCat()
        {
            Arena.Cat.Hit();
            return NodeVal.Success;
        }

        public NodeVal ChooseIdleTarget()
        {
            IdleTarget = Arena.RandomPosition();
            return NodeVal.Success;
        }

        public NodeVal Flee()
        {
            return NodeVal.Success;
        }

        public NodeVal EatClosestCheese()
        {
            var cheese = Arena.ClosestCheese(transform.position);
            if (cheese == null)
            {
                return NodeVal.Fail;
            }
            Arena.RemoveCheese(cheese);

            FoodLevel += CheeseValue;

            return NodeVal.Success;
        }

    }
}
