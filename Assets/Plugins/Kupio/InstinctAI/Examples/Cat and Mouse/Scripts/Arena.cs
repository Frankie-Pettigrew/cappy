//%GenSrc:1:Ih/MALQAzEqSXjp5ejdtfg
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

namespace instinctai.usr.behaviours
{
    using System.Collections.Generic;
    using com.kupio.instinctai;
    using UnityEngine;

    public partial class Arena : MonoBehaviour
    {
        private const float BORDER = 0.1f;

        public int MaxCheeses = 2;
        public GameObject CheesePrefab;
        public Cat Cat;
        public Mouse Mouse;

        private List<GameObject> _cheeses;
        private Rect _arenaRect;

        public int CheeseCount
        {
            get
            {
                return _cheeses.Count;
            }
        }

        private void Start()
        {
            _cheeses = new List<GameObject>();

            var bounds = GetComponent<Renderer>().bounds;

            /* Use the plane object in the scene to set the area our characters can inhabit. */
            this._arenaRect = new Rect(
                new Vector2(bounds.min.x + BORDER, bounds.min.y + BORDER),
                new Vector2(bounds.extents.x * 2 - BORDER, bounds.extents.y * 2 - BORDER));
        }

        public Vector3 RandomPosition()
        {
            return new Vector3(
                UnityEngine.Random.Range(this._arenaRect.xMin, this._arenaRect.xMax),
                UnityEngine.Random.Range(this._arenaRect.yMin, this._arenaRect.yMax),
                -1);
        }

        public NodeVal SpawnCheese()
        {
            if (_cheeses.Count >= MaxCheeses)
            {
                return NodeVal.Fail;
            }

            var cheese = GameObject.Instantiate(CheesePrefab);
            cheese.transform.position = RandomPosition();

            _cheeses.Add(cheese);

            return NodeVal.Success;
        }

        internal Vector3 ClosestCheesePosition(Vector3 position)
        {
            var cheese = ClosestCheese(position);

            if (cheese == null)
            {
                return Vector3.zero;
            }
            
            return cheese.transform.position;
        }

        public GameObject ClosestCheese(Vector3 position)
        {
            if (_cheeses.Count <= 0)
            {
                return null;
            }

            int idx = 0;
            int bestIdx = 0;
            float dist = float.MaxValue;
            do
            {
                var nextDist = (_cheeses[idx].transform.position - position).sqrMagnitude;
                if (nextDist < dist)
                {
                    dist = nextDist;
                    bestIdx = idx;
                }
            } while (++idx < _cheeses.Count);

            return _cheeses[bestIdx];
        }

        internal void RemoveCheese(GameObject cheese)
        {
            _cheeses.Remove(cheese);
            DestroyObject(cheese);
        }
    }
}
